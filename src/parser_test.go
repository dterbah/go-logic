package logic

/* Test autogenerated with the tool go-test-gen. Created 2024-07-03 17:26:57 Wednesday */

import (
	"testing"

	"github.com/dterbah/gods/list/arraylist"
	"github.com/stretchr/testify/assert"
)

func TestNewParser(t *testing.T) {
	assert := assert.New(t)
	parser := NewParser(arraylist.New[Token](func(a, b Token) int { return 0 }))

	assert.NotNil(parser)
}

func TestParse(t *testing.T) {
	variables := make(map[string]bool)
	mockTokenComparator := func(a, b Token) int {
		if a.Type == b.Type && a.Value == b.Value {
			return 0
		}

		return 1
	}

	tests := []struct {
		name      string
		tokens    []Token
		variables map[string]bool
		isPanic   bool
		result    bool
	}{
		{"test with a single variable", []Token{Token{Type: VAR, Value: "a"}}, map[string]bool{"a": true}, false, true},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			tokens := arraylist.New(mockTokenComparator, test.tokens...)
			parser := NewParser(tokens)

		})
	}
}
